ITEMS_File:
Number KuecheDreh 	"KuecheDrehencoder [%s]"	(gruppeKueche)	{mqtt="<[MQTT:stat/KuecheSchalter/RESULT:state:JSONPATH($.I2cRotary_Value)]"}
Number KuecheDrehOld    "KuecheDrehencoder Alt [%s]"
Number KuecheDrehstate  "KuecheDrehencoder [%s]"			{mqtt="<[MQTT:stat/KuecheSchalter/RESULT:state:JSONPATH($.I2cRotary_Value)]"}
Dimmer KuecheDrehDimmer "Kueche Dimmer 01 [%s]"				{mqtt=">[mqtt:cmnd/KuecheSchalter/DIMMER:command:*:default],<[mqtt:stat/KuecheSchalter/RESULT:state:JSONPATH($.Dimmer)],<[MQTT:tele/KuecheSchalter/STATE:state:JSONPATH($.Dimmer)]"}


SITEMAP_File:

		Text 	item=KuecheDreh
		Text 	item=KuecheDrehOld
		Slider  item=KuecheDrehDimmer


RULE_File:

rule "Drehencoder Auswerten"
	when
		Item KuecheDreh changed
	then
		var Number alterWert = KuecheDrehOld.state as Number
		var Number neuerWert = KuecheDreh.state as Number
		if (neuerWert > 250 && alterWert < 5){ alterWert = alterWert + 256};
		if (neuerWert < 5 && alterWert > 250){ alterWert = alterWert - 256};
		var Number AktuellerDimmwert = KuecheDrehDimmer.state as Number
		var Dimmwert = 5
			var j = neuerWert - alterWert;
			var i = 0;
			while ((i=i+1) < j){
			Dimmwert = Dimmwert + Dimmwert;
			}
//		val Number Anzahl = 0 
		if (neuerWert < alterWert ){
			KuecheDrehDimmer.sendCommand(KuecheDrehDimmer.state as DecimalType - Dimmwert);//		KuecheDrehOld = neuerWert;
		if (AktuellerDimmwert <= Dimmwert ){  KuecheDrehDimmer.sendCommand(0) ;}
		};
		if (neuerWert > alterWert ){
			KuecheDrehDimmer.sendCommand(KuecheDrehDimmer.state as DecimalType + Dimmwert);//		KuecheDrehOld = neuerWert;
		if ((Dimmwert+AktuellerDimmwert) >= 100){  KuecheDrehDimmer.sendCommand(100) ;}
		};
		KuecheDrehOld.postUpdate(neuerWert);

end
